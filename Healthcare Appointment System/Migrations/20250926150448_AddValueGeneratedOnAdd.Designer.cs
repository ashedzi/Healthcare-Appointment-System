// <auto-generated />
using System;
using Healthcare_Appointment_System.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Healthcare_Appointment_System.Migrations
{
    [DbContext(typeof(HealthcareAppointmentSystemContext))]
    [Migration("20250926150448_AddValueGeneratedOnAdd")]
    partial class AddValueGeneratedOnAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentStatus = 0,
                            ClinicId = 1,
                            DoctorId = 1,
                            Duration = 30,
                            Note = "Routine checkup",
                            PatientId = 1,
                            Reason = 0,
                            StartTime = new DateTime(2025, 9, 25, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentStatus = 0,
                            ClinicId = 2,
                            DoctorId = 2,
                            Duration = 45,
                            Note = "Skin rash consultation",
                            PatientId = 2,
                            Reason = 2,
                            StartTime = new DateTime(2025, 9, 25, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentStatus = 0,
                            ClinicId = 3,
                            DoctorId = 3,
                            Duration = 30,
                            Note = "Pediatric follow-up",
                            PatientId = 3,
                            Reason = 1,
                            StartTime = new DateTime(2025, 9, 26, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentStatus = 0,
                            ClinicId = 4,
                            DoctorId = 4,
                            Duration = 45,
                            Note = "Neurology consultation",
                            PatientId = 4,
                            Reason = 9,
                            StartTime = new DateTime(2025, 9, 26, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentStatus = 0,
                            ClinicId = 5,
                            DoctorId = 5,
                            Duration = 30,
                            Note = "Gynecology checkup",
                            PatientId = 5,
                            Reason = 0,
                            StartTime = new DateTime(2025, 9, 27, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentStatus = 0,
                            ClinicId = 1,
                            DoctorId = 1,
                            Duration = 30,
                            Note = "Cardio follow-up",
                            PatientId = 2,
                            Reason = 1,
                            StartTime = new DateTime(2025, 9, 27, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("ClinicAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<TimeSpan>("EndOperatingHours")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartOperatingHours")
                        .HasColumnType("time");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            ClinicId = 1,
                            ClinicAddress = "123 Main St",
                            ClinicEmail = "info@cityhealth.com",
                            ContactNumber = "555-1000",
                            EndOperatingHours = new TimeSpan(0, 17, 0, 0, 0),
                            Name = "City Health Clinic",
                            StartOperatingHours = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            ClinicId = 2,
                            ClinicAddress = "456 Elm Ave",
                            ClinicEmail = "contact@downtownmed.com",
                            ContactNumber = "555-2000",
                            EndOperatingHours = new TimeSpan(0, 18, 0, 0, 0),
                            Name = "Downtown Medical Center",
                            StartOperatingHours = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            ClinicId = 3,
                            ClinicAddress = "789 Oak Blvd",
                            ClinicEmail = "hello@suburbanclinic.com",
                            ContactNumber = "555-3000",
                            EndOperatingHours = new TimeSpan(0, 16, 0, 0, 0),
                            Name = "Suburban Family Clinic",
                            StartOperatingHours = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            ClinicId = 4,
                            ClinicAddress = "101 Pine Rd",
                            ClinicEmail = "info@specialistcare.com",
                            ContactNumber = "555-4000",
                            EndOperatingHours = new TimeSpan(0, 19, 0, 0, 0),
                            Name = "Specialist Care Center",
                            StartOperatingHours = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            ClinicId = 5,
                            ClinicAddress = "202 Maple St",
                            ClinicEmail = "contact@wellnessclinic.com",
                            ContactNumber = "555-5000",
                            EndOperatingHours = new TimeSpan(0, 17, 30, 0, 0),
                            Name = "Health & Wellness Clinic",
                            StartOperatingHours = new TimeSpan(0, 8, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<int>("AppointmentDurationMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("AvailableEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("AvailableStart")
                        .HasColumnType("time");

                    b.Property<int>("DoctorSpecialty")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            AppointmentDurationMinutes = 30,
                            AvailableEnd = new TimeSpan(0, 17, 0, 0, 0),
                            AvailableStart = new TimeSpan(0, 9, 0, 0, 0),
                            DoctorSpecialty = 2,
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            LicenseNumber = "LIC001",
                            PhoneNumber = "555-1111"
                        },
                        new
                        {
                            DoctorId = 2,
                            AppointmentDurationMinutes = 30,
                            AvailableEnd = new TimeSpan(0, 18, 0, 0, 0),
                            AvailableStart = new TimeSpan(0, 10, 0, 0, 0),
                            DoctorSpecialty = 3,
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            LicenseNumber = "LIC002",
                            PhoneNumber = "555-2222"
                        },
                        new
                        {
                            DoctorId = 3,
                            AppointmentDurationMinutes = 30,
                            AvailableEnd = new TimeSpan(0, 16, 0, 0, 0),
                            AvailableStart = new TimeSpan(0, 8, 0, 0, 0),
                            DoctorSpecialty = 1,
                            Email = "alicebrown@example.com",
                            FirstName = "Alice",
                            LastName = "Brown",
                            LicenseNumber = "LIC003",
                            PhoneNumber = "555-3333"
                        },
                        new
                        {
                            DoctorId = 4,
                            AppointmentDurationMinutes = 45,
                            AvailableEnd = new TimeSpan(0, 17, 0, 0, 0),
                            AvailableStart = new TimeSpan(0, 9, 0, 0, 0),
                            DoctorSpecialty = 4,
                            Email = "michaelgreen@example.com",
                            FirstName = "Michael",
                            LastName = "Green",
                            LicenseNumber = "LIC004",
                            PhoneNumber = "555-4444"
                        },
                        new
                        {
                            DoctorId = 5,
                            AppointmentDurationMinutes = 30,
                            AvailableEnd = new TimeSpan(0, 15, 30, 0, 0),
                            AvailableStart = new TimeSpan(0, 7, 30, 0, 0),
                            DoctorSpecialty = 6,
                            Email = "laurawhite@example.com",
                            FirstName = "Laura",
                            LastName = "White",
                            LicenseNumber = "LIC005",
                            PhoneNumber = "555-5555"
                        });
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.DoctorClinic", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorShift")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("DoctorClinics");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            ClinicId = 1,
                            DoctorShift = 0,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 2,
                            ClinicId = 2,
                            DoctorShift = 1,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 3,
                            ClinicId = 3,
                            DoctorShift = 0,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 4,
                            ClinicId = 4,
                            DoctorShift = 1,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 5,
                            ClinicId = 5,
                            DoctorShift = 0,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Address = "12 River Rd",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "555-9000",
                            FirstName = "Tom",
                            Gender = 0,
                            LastName = "Anderson",
                            PatientEmail = "tomanderson@example.com",
                            PhoneNumber = "555-6001"
                        },
                        new
                        {
                            PatientId = 2,
                            Address = "34 Lake St",
                            DateOfBirth = new DateTime(1985, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "555-9001",
                            FirstName = "Emily",
                            Gender = 1,
                            LastName = "Clark",
                            PatientEmail = "emilyclarke@example.com",
                            PhoneNumber = "555-6002"
                        },
                        new
                        {
                            PatientId = 3,
                            Address = "56 Hill Ave",
                            DateOfBirth = new DateTime(2000, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "555-9002",
                            FirstName = "David",
                            Gender = 0,
                            LastName = "Lee",
                            PatientEmail = "davidlee@example.com",
                            PhoneNumber = "555-6003"
                        },
                        new
                        {
                            PatientId = 4,
                            Address = "78 Pine St",
                            DateOfBirth = new DateTime(1995, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "555-9003",
                            FirstName = "Sophia",
                            Gender = 1,
                            LastName = "Taylor",
                            PatientEmail = "sophiataylor@example.com",
                            PhoneNumber = "555-6004"
                        },
                        new
                        {
                            PatientId = 5,
                            Address = "90 Oak Rd",
                            DateOfBirth = new DateTime(1988, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "555-9004",
                            FirstName = "James",
                            Gender = 0,
                            LastName = "Wilson",
                            PatientEmail = "jameswilson@example.com",
                            PhoneNumber = "555-6005"
                        });
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Appointment", b =>
                {
                    b.HasOne("Healthcare_Appointment_System.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare_Appointment_System.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare_Appointment_System.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.DoctorClinic", b =>
                {
                    b.HasOne("Healthcare_Appointment_System.Models.Clinic", "Clinic")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare_Appointment_System.Models.Doctor", "Doctor")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Clinic", b =>
                {
                    b.Navigation("DoctorClinics");
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorClinics");
                });

            modelBuilder.Entity("Healthcare_Appointment_System.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
